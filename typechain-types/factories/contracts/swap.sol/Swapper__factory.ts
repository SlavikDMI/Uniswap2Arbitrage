/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Swapper,
  SwapperInterface,
} from "../../../contracts/swap.sol/Swapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "simpleSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amountOutMin",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e8c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806360f7f9471461003b578063d5bcb9b514610057575b600080fd5b61005560048036038101906100509190610935565b610073565b005b610071600480360381019061006c9190610935565b610346565b005b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016100b0939291906109ce565b602060405180830381600087803b1580156100ca57600080fd5b505af11580156100de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101029190610a3d565b508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3737a250d5630b4cf539739df2c5dacb4c659f2488d856040518363ffffffff1660e01b8152600401610152929190610a6a565b602060405180830381600087803b15801561016c57600080fd5b505af1158015610180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a49190610a3d565b506060600267ffffffffffffffff8111156101c2576101c1610a93565b5b6040519080825280602002602001820160405280156101f05781602001602082028036833780820191505090505b509050858160008151811061020857610207610ac2565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050848160018151811061025757610256610ac2565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff166338ed173985858486426040518663ffffffff1660e01b81526004016102e6959493929190610baf565b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061033d9190610d48565b50505050505050565b600073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016103959190610d91565b60206040518083038186803b1580156103ad57600080fd5b505afa1580156103c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e59190610dac565b905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610438939291906109ce565b602060405180830381600087803b15801561045257600080fd5b505af1158015610466573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048a9190610a3d565b5073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff1663095ea7b3737a250d5630b4cf539739df2c5dacb4c659f2488d866040518363ffffffff1660e01b81526004016104ee929190610a6a565b602060405180830381600087803b15801561050857600080fd5b505af115801561051c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105409190610a3d565b506060600467ffffffffffffffff81111561055e5761055d610a93565b5b60405190808252806020026020018201604052801561058c5781602001602082028036833780820191505090505b50905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2816000815181106105b8576105b7610ac2565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050868160018151811061060757610606610ac2565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050858160028151811061065657610655610ac2565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2816003815181106106b9576106b8610ac2565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050737a250d5630b4cf539739df2c5dacb4c659f2488d73ffffffffffffffffffffffffffffffffffffffff166338ed173986868487426040518663ffffffff1660e01b8152600401610748959493929190610baf565b600060405180830381600087803b15801561076257600080fd5b505af1158015610776573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061079f9190610d48565b50600073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016107ef9190610d91565b60206040518083038186803b15801561080757600080fd5b505afa15801561081b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083f9190610dac565b9050828111610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087a90610e36565b60405180910390fd5b5050505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108cc826108a1565b9050919050565b6108dc816108c1565b81146108e757600080fd5b50565b6000813590506108f9816108d3565b92915050565b6000819050919050565b610912816108ff565b811461091d57600080fd5b50565b60008135905061092f81610909565b92915050565b600080600080600060a0868803121561095157610950610897565b5b600061095f888289016108ea565b9550506020610970888289016108ea565b945050604061098188828901610920565b935050606061099288828901610920565b92505060806109a3888289016108ea565b9150509295509295909350565b6109b9816108c1565b82525050565b6109c8816108ff565b82525050565b60006060820190506109e360008301866109b0565b6109f060208301856109b0565b6109fd60408301846109bf565b949350505050565b60008115159050919050565b610a1a81610a05565b8114610a2557600080fd5b50565b600081519050610a3781610a11565b92915050565b600060208284031215610a5357610a52610897565b5b6000610a6184828501610a28565b91505092915050565b6000604082019050610a7f60008301856109b0565b610a8c60208301846109bf565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610b26816108c1565b82525050565b6000610b388383610b1d565b60208301905092915050565b6000602082019050919050565b6000610b5c82610af1565b610b668185610afc565b9350610b7183610b0d565b8060005b83811015610ba2578151610b898882610b2c565b9750610b9483610b44565b925050600181019050610b75565b5085935050505092915050565b600060a082019050610bc460008301886109bf565b610bd160208301876109bf565b8181036040830152610be38186610b51565b9050610bf260608301856109b0565b610bff60808301846109bf565b9695505050505050565b600080fd5b6000601f19601f8301169050919050565b610c2882610c0e565b810181811067ffffffffffffffff82111715610c4757610c46610a93565b5b80604052505050565b6000610c5a61088d565b9050610c668282610c1f565b919050565b600067ffffffffffffffff821115610c8657610c85610a93565b5b602082029050602081019050919050565b600080fd5b600081519050610cab81610909565b92915050565b6000610cc4610cbf84610c6b565b610c50565b90508083825260208201905060208402830185811115610ce757610ce6610c97565b5b835b81811015610d105780610cfc8882610c9c565b845260208401935050602081019050610ce9565b5050509392505050565b600082601f830112610d2f57610d2e610c09565b5b8151610d3f848260208601610cb1565b91505092915050565b600060208284031215610d5e57610d5d610897565b5b600082015167ffffffffffffffff811115610d7c57610d7b61089c565b5b610d8884828501610d1a565b91505092915050565b6000602082019050610da660008301846109b0565b92915050565b600060208284031215610dc257610dc1610897565b5b6000610dd084828501610c9c565b91505092915050565b600082825260208201905092915050565b7f617262697472616765206661696c656400000000000000000000000000000000600082015250565b6000610e20601083610dd9565b9150610e2b82610dea565b602082019050919050565b60006020820190508181036000830152610e4f81610e13565b905091905056fea2646970667358221220890de98db98523656f1e3baa8ed93b393ef6945f4ab36c5d6f7bc485644af83264736f6c63430008090033";

type SwapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Swapper__factory extends ContractFactory {
  constructor(...args: SwapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Swapper> {
    return super.deploy(overrides || {}) as Promise<Swapper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Swapper {
    return super.attach(address) as Swapper;
  }
  override connect(signer: Signer): Swapper__factory {
    return super.connect(signer) as Swapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapperInterface {
    return new utils.Interface(_abi) as SwapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Swapper {
    return new Contract(address, _abi, signerOrProvider) as Swapper;
  }
}
